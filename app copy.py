import streamlit as st
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
import yaml
import json
from dotenv import load_dotenv
import os

# Cargar variables de entorno
load_dotenv()

############################
# Funciones de Generaci√≥n
############################
def generate_sam_template(config):
    """Genera el template SAM basado en la configuraci√≥n proporcionada."""
    template = {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Transform": "AWS::Serverless-2016-10-31",
        "Description": "Lambda generada con AWS Lambda Generator Pro",
        "Resources": {
            "MyFunction": {
                "Type": "AWS::Serverless::Function",
                "Properties": {
                    "Handler": f"handler.{config['handler_name']}",
                    "Runtime": "python3.9",
                    "MemorySize": config["memory"],
                    "Timeout": config["timeout"],
                    "Environment": {
                        "Variables": {}
                    }
                }
            }
        }
    }
    
    # Agregar configuraci√≥n espec√≠fica seg√∫n el trigger
    if config.get("trigger_type") == "S3 Upload":
        template["Resources"]["MyFunction"]["Properties"]["Events"] = {
            "S3Event": {
                "Type": "S3",
                "Properties": {
                    "Bucket": {"Ref": config.get("bucket_name")},
                    "Events": ["s3:ObjectCreated:*"]
                }
            }
        }
    elif config.get("trigger_type") == "API Gateway":
        template["Resources"]["MyFunction"]["Properties"]["Events"] = {
            "ApiEvent": {
                "Type": "Api",
                "Properties": {
                    "Path": config.get("route", "/"),
                    "Method": config.get("http_method", "GET")
                }
            }
        }
    
    # Agregar variables de entorno
    if config.get("env_vars"):
        template["Resources"]["MyFunction"]["Properties"]["Environment"]["Variables"] = config["env_vars"]
    
    return yaml.dump(template, sort_keys=False)

def get_llm():
    """Configura y retorna la instancia de LangChain."""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        api_key = st.secrets.get("OPENAI_API_KEY", None)
    
    if not api_key:
        st.error("No se ha configurado la API key de OpenAI. Por favor, config√∫rala en el archivo .env o en los secrets de Streamlit.")
        st.stop()
    
    return ChatOpenAI(
        model="gpt-4o-mini",
        temperature=0.2,
        api_key=api_key
    )

def show_help(title, content):
    """Muestra un expander con informaci√≥n de ayuda."""
    with st.expander(f"‚ÑπÔ∏è {title}"):
        st.markdown(content)

############################
# Configuraci√≥n de la p√°gina
############################
st.set_page_config(
    page_title="AWS Lambda Generator Pro",
    page_icon="‚ö°",
    layout="wide"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    .stButton>button {
        width: 100%;
        background-color: #FF9900;
        color: white;
    }
    .info-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #f0f2f6;
        margin: 1rem 0;
    }
    .env-var-container {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .step-container {
        background-color: #ffffff;
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
    }
    .help-text {
        font-size: 0.9rem;
        color: #666;
        margin-bottom: 1rem;
    }
</style>
""", unsafe_allow_html=True)

############################
# Selecci√≥n de Herramienta
############################
st.title("‚ö° AWS Lambda Tools")

tool_selection = st.radio(
    "Selecciona la herramienta que necesitas:",
    ["üõ†Ô∏è Generador de Lambdas", "üîç Debugger de Lambdas"],
    help="Escoge entre crear una nueva Lambda o analizar/debuggear una existente"
)

if tool_selection == "üõ†Ô∏è Generador de Lambdas":
    st.markdown("""
    ## Generador de AWS Lambda
    #### üéØ ¬øQu√© es esto?
    Esta herramienta te ayuda a crear funciones AWS Lambda paso a paso, sin necesidad de ser un experto.
    Una Lambda es como una funci√≥n en la nube que se ejecuta cuando algo espec√≠fico sucede.
    """)
    
    ############################
    # 1. Selecci√≥n de Trigger
    ############################
    with st.container():
        st.markdown("""
        ## Paso 1: ¬øCu√°ndo quieres que se ejecute tu Lambda? üéØ
        Selecciona el evento que activar√° tu funci√≥n:
        """)
        
        show_help("¬øQu√© es un Trigger?", """
        Un trigger es el evento que hace que tu Lambda se ejecute. Es como decir "cuando pase X, haz Y":

        üóÇÔ∏è **S3 Upload**: 
        - Se ejecuta cuando alguien sube un archivo
        - √ötil para procesar archivos (im√°genes, documentos, etc.)
        
        üåê **API Gateway**: 
        - Se ejecuta cuando alguien hace una petici√≥n web
        - √ötil para crear APIs y servicios web
        
        ‚è∞ **Scheduled Event**: 
        - Se ejecuta en momentos espec√≠ficos
        - √ötil para tareas programadas (backups, limpieza, etc.)
        
        üì® **SNS**: 
        - Se ejecuta cuando llega un mensaje o notificaci√≥n
        - √ötil para procesar notificaciones
        
        üì¨ **SQS**: 
        - Se ejecuta cuando hay mensajes en una cola
        - √ötil para procesar tareas en orden
        """)

        trigger_descriptions = {
            "S3 Upload": "üìÅ Cuando se sube un archivo",
            "API Gateway": "üåê Cuando alguien hace una petici√≥n web",
            "Scheduled Event": "‚è∞ Cuando quieres que se ejecute peri√≥dicamente",
            "SNS": "üì® Cuando llega una notificaci√≥n",
            "SQS": "üì¨ Cuando hay mensajes en una cola",
        }

        selected_trigger = st.selectbox(
            "Selecciona cu√°ndo quieres que se ejecute tu Lambda:",
            list(trigger_descriptions.keys()),
            format_func=lambda x: trigger_descriptions[x]
        )

    ############################
    # 2. Configuraci√≥n espec√≠fica
    ############################
    config_values = {"trigger_type": selected_trigger}

    with st.container():
        st.markdown("""
        ## Paso 2: Configuraci√≥n espec√≠fica üîß
        Configura los detalles espec√≠ficos seg√∫n el tipo de evento:
        """)

        if selected_trigger == "S3 Upload":
            show_help("¬øC√≥mo configurar S3?", """
            üìÅ **Configuraci√≥n para archivos:**
            
            1. **Bucket**: Es como una carpeta en la nube donde se guardan tus archivos
               - Debe ser un nombre √∫nico en todo AWS
               - Solo letras min√∫sculas, n√∫meros y guiones
               - Ejemplo: `mi-empresa-archivos`
            
            2. **Prefijo**: Es como una subcarpeta (opcional)
               - Te permite procesar solo ciertos archivos
               - Ejemplo: `uploads/` o `imagenes/`
            
            ‚ö° **Ejemplo de uso:**
            - Bucket: `mi-empresa-fotos`
            - Prefijo: `uploads/`
            - ‚Üí La Lambda se ejecutar√° cuando se suban archivos a `uploads/` en el bucket `mi-empresa-fotos`
            """)
            
            config_values["bucket_name"] = st.text_input(
                "Nombre del Bucket (carpeta en la nube)",
                value="mi-empresa-archivos",
                help="Nombre √∫nico donde se guardar√°n tus archivos"
            )
            config_values["prefix"] = st.text_input(
                "Prefijo (subcarpeta - opcional)",
                help="Ejemplo: 'uploads/' solo procesar√° archivos en esa carpeta"
            )

        elif selected_trigger == "API Gateway":
            show_help("¬øC√≥mo configurar el API?", """
            üåê **Configuraci√≥n para API web:**
            
            1. **Ruta**: Es la direcci√≥n web de tu API
               - Debe empezar con `/`
               - Ejemplo: `/api/usuarios` o `/procesar-datos`
            
            2. **M√©todo**: Es el tipo de operaci√≥n
               - GET: Para obtener datos
               - POST: Para crear/enviar datos
               - PUT: Para actualizar datos
               - DELETE: Para eliminar datos
            
            ‚ö° **Ejemplo de uso:**
            - Ruta: `/api/usuarios`
            - M√©todo: `POST`
            - ‚Üí La Lambda se ejecutar√° cuando alguien env√≠e datos a `https://tu-api.com/api/usuarios`
            """)
            
            config_values["route"] = st.text_input(
                "Ruta de tu API",
                value="/api/v1/datos",
                help="La direcci√≥n web donde estar√° disponible tu API"
            )
            config_values["http_method"] = st.selectbox(
                "¬øQu√© tipo de operaci√≥n quieres permitir?",
                ["GET", "POST", "PUT", "DELETE"],
                help="GET para obtener datos, POST para enviar datos"
            )

    ############################
    # 3. Configuraci√≥n com√∫n
    ############################
    st.markdown("""
    ## Paso 3: Configuraci√≥n b√°sica ‚öôÔ∏è
    Estos son los ajustes b√°sicos que necesita tu Lambda:
    """)

    show_help("¬øQu√© significan estos ajustes?", """
    ‚öôÔ∏è **Configuraci√≥n b√°sica explicada:**

    1. **Memoria**: 
       - Cu√°nta memoria tendr√° tu Lambda
       - M√°s memoria = m√°s r√°pido pero m√°s costoso
       - Para empezar, 128MB est√° bien para tareas simples

    2. **Tiempo m√°ximo**: 
       - Cu√°nto tiempo puede ejecutarse tu Lambda
       - Para empezar, 30 segundos suele ser suficiente
       - Aumenta si tu tarea necesita m√°s tiempo

    3. **Variables de entorno**:
       - Son como configuraciones que puedes cambiar sin tocar el c√≥digo
       - Ejemplos comunes ya est√°n preconfigurados
    """)

    config_values["handler_name"] = "lambda_handler"  # Simplificamos quitando esta opci√≥n

    col1, col2 = st.columns(2)
    with col1:
        config_values["memory"] = st.select_slider(
            "üíæ Memoria (MB)",
            options=[128, 256, 512, 1024, 2048],
            value=256,
            help="Cu√°nta memoria necesita tu Lambda. Para empezar, 256MB est√° bien."
        )

    with col2:
        config_values["timeout"] = st.select_slider(
            "‚è±Ô∏è Tiempo m√°ximo (segundos)",
            options=[5, 10, 30, 60, 300],
            value=30,
            help="Cu√°nto tiempo puede ejecutarse tu Lambda como m√°ximo"
        )

    # Simplificamos las variables de entorno
    st.markdown("### Variables de configuraci√≥n")
    show_help("Variables de configuraci√≥n", """
    Son valores que puedes cambiar sin modificar el c√≥digo. Por ejemplo:
    - El ambiente (desarrollo/producci√≥n)
    - La regi√≥n de AWS
    - El nivel de logs (qu√© tan detallados son)
    """)

    # Variables de entorno predefinidas m√°s simples
    config_values["env_vars"] = {
        "ENVIRONMENT": st.selectbox("Ambiente", ["development", "production"], help="¬øEs para desarrollo o producci√≥n?"),
        "AWS_REGION": "us-east-1",  # Simplificamos dejando un valor por defecto
        "LOG_LEVEL": "INFO"  # Simplificamos dejando un valor por defecto
    }

    ############################
    # 4. L√≥gica de negocio
    ############################
    st.markdown("""
    ## Paso 4: ¬øQu√© quieres que haga tu Lambda? üí°
    Describe en lenguaje natural qu√© quieres que haga tu funci√≥n:
    """)

    show_help("Ejemplos de L√≥gica", """
    üéØ **Ejemplos seg√∫n el tipo de trigger:**

    **Para S3 Upload:**
    - "Procesar im√°genes y reducir su tama√±o"
    - "Convertir archivos CSV a JSON"
    - "Analizar documentos PDF y extraer texto"

    **Para API Gateway:**
    - "Crear un endpoint que registre usuarios en una base de datos"
    - "Consultar el estado de un pedido"
    - "Procesar pagos y enviar confirmaci√≥n"

    **Para Scheduled Events:**
    - "Hacer backup de una base de datos cada d√≠a"
    - "Enviar reportes por email semanalmente"
    - "Limpiar archivos temporales antiguos"
    """)

    logic_description = st.text_area(
        "Describe qu√© quieres que haga tu Lambda",
        help="Explica en espa√±ol, con tus propias palabras, qu√© debe hacer la funci√≥n",
        height=100
    )

    ############################
    # 5. Generaci√≥n de c√≥digo
    ############################
    if st.button("üöÄ Generar C√≥digo"):
        with st.spinner("Generando c√≥digo personalizado..."):
            # Primero, generamos la l√≥gica espec√≠fica con LangChain
            logic_prompt = f"""Genera el c√≥digo Python para una funci√≥n AWS Lambda que haga lo siguiente:
            
            Descripci√≥n: {logic_description}
            Tipo de trigger: {selected_trigger}
            
            La funci√≥n debe:
            1. Seguir las mejores pr√°cticas de AWS Lambda
            2. Incluir manejo de errores y logging apropiado
            3. Ser eficiente y clara
            4. Incluir las importaciones necesarias
            5. Incluir comentarios explicativos
            6. NO incluir c√≥digo de ejemplo o plantillas
            7. Implementar SOLO la funcionalidad solicitada
            
            Importante:
            - El c√≥digo debe ser una √∫nica implementaci√≥n coherente
            - NO incluir m√∫ltiples versiones o ejemplos
            - NO incluir c√≥digo comentado o alternativas
            - Asegurarse de que todas las funciones est√©n correctamente definidas
            - Incluir solo las dependencias estrictamente necesarias
            
            Estructura el c√≥digo en este orden:
            1. Imports
            2. Configuraci√≥n de logging
            3. Configuraci√≥n de clientes AWS necesarios
            4. Funci√≥n principal lambda_handler
            5. Funciones auxiliares necesarias
            """

            llm = get_llm()
            logic_response = llm.invoke(logic_prompt)
            
            # Generar el c√≥digo completo
            code_template = logic_response.content

            # Generar template SAM
            sam_template = generate_sam_template(config_values)

            # Mostrar resultados
            st.markdown("## Resultado Final üéâ")
            
            # An√°lisis con LangChain
            with st.spinner("Analizando el c√≥digo generado..."):
                review_template = """Analiza y explica el siguiente c√≥digo de AWS Lambda:

                DESCRIPCI√ìN DE LA FUNCIONALIDAD:
                {description}

                C√ìDIGO PYTHON:
                {python_code}

                TEMPLATE SAM:
                {sam_template}

                Por favor, proporciona una explicaci√≥n clara y estructurada:
                1. üìù Explicaci√≥n general del c√≥digo y su funcionamiento
                2. üîç Desglose de cada parte importante
                3. üéØ C√≥mo cumple con los requisitos solicitados
                4. ‚ö†Ô∏è Consideraciones importantes a tener en cuenta
                
                Usa un lenguaje simple y claro, enfocado a desarrolladores con conocimientos b√°sicos."""

                prompt = ChatPromptTemplate.from_template(review_template)
                chain = prompt | llm

                response = chain.invoke({
                    "description": logic_description,
                    "python_code": code_template,
                    "sam_template": sam_template
                })

            # Mostrar el c√≥digo y la explicaci√≥n
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üìÑ C√≥digo Python (handler.py)")
                st.code(code_template, language="python")
                st.download_button(
                    "‚¨áÔ∏è Descargar handler.py",
                    code_template,
                    file_name="handler.py",
                    mime="text/plain"
                )

            with col2:
                st.subheader("üèóÔ∏è Template SAM (template.yaml)")
                st.code(sam_template, language="yaml")
                st.download_button(
                    "‚¨áÔ∏è Descargar template.yaml",
                    sam_template,
                    file_name="template.yaml",
                    mime="text/plain"
                )

            # Mostrar la explicaci√≥n
            st.markdown("### üìö Explicaci√≥n del C√≥digo")
            st.info(response.content)

            # Agregar instrucciones de despliegue
            st.markdown("""
            ### üöÄ Pr√≥ximos Pasos
            
            1. Descarga los archivos generados
            2. Col√≥calos en una carpeta de tu proyecto
            3. Abre una terminal en esa carpeta
            4. Ejecuta los siguientes comandos:
            ```bash
            sam build
            sam deploy --guided
            ```
            """)

elif tool_selection == "üîç Debugger de Lambdas":
    st.markdown("""
    ## AWS Lambda Debugger
    #### üéØ ¬øQu√© es esto?
    Esta herramienta te ayuda a analizar y mejorar tus funciones Lambda existentes.
    Puedes subir tu c√≥digo o pegarlo directamente para obtener un an√°lisis detallado y sugerencias de mejora.
    """)

    # Selector de m√©todo de entrada
    input_method = st.radio(
        "¬øC√≥mo quieres proporcionar tu c√≥digo?",
        ["üìã Pegar C√≥digo", "üìÅ Subir Archivos"],
        help="Escoge c√≥mo quieres proporcionar el c√≥digo para analizar"
    )

    handler_content = None
    template_content = None

    if input_method == "üìã Pegar C√≥digo":
        st.markdown("### C√≥digo Python (handler.py)")
        handler_content = st.text_area(
            "Pega tu c√≥digo Python aqu√≠",
            height=300,
            help="Pega el contenido de tu archivo handler.py"
        )

        st.markdown("### Template SAM (opcional)")
        template_content = st.text_area(
            "Pega tu template SAM aqu√≠ (opcional)",
            height=200,
            help="Pega el contenido de tu archivo template.yaml si lo tienes"
        )

    else:  # Subir Archivos
        uploaded_handler = st.file_uploader("Sube tu archivo handler.py", type=["py"])
        uploaded_template = st.file_uploader("Sube tu template.yaml (opcional)", type=["yaml", "yml"])

        if uploaded_handler is not None:
            handler_content = uploaded_handler.getvalue().decode("utf-8")
        if uploaded_template is not None:
            template_content = uploaded_template.getvalue().decode("utf-8")

    if handler_content:
        st.markdown("### üìÑ C√≥digo a Analizar")
        st.code(handler_content, language="python")

        # Obtener instancia de LLM una sola vez
        llm = get_llm()

        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîç Analizar C√≥digo"):
                with st.spinner("Analizando tu c√≥digo..."):
                    analysis_prompt = """Analiza el siguiente c√≥digo de AWS Lambda y proporciona un informe detallado:

                    C√ìDIGO PYTHON:
                    {handler_code}

                    {template_section}

                    Por favor, proporciona un an√°lisis detallado que incluya:

                    1. üîç An√°lisis de C√≥digo
                       - Estructura y organizaci√≥n
                       - Manejo de errores
                       - Logging y monitoreo
                       - Seguridad

                    2. ‚ö†Ô∏è Problemas Potenciales
                       - Problemas de rendimiento
                       - Fugas de memoria
                       - Problemas de seguridad
                       - Malas pr√°cticas

                    3. ‚úÖ Recomendaciones
                       - Mejoras espec√≠ficas de c√≥digo
                       - Optimizaciones
                       - Mejores pr√°cticas
                       - Patrones recomendados

                    4. üìä Recursos y Costos
                       - Uso de memoria
                       - Tiempo de ejecuci√≥n
                       - Costos estimados
                       - Optimizaci√≥n de recursos

                    Usa un lenguaje claro y proporciona ejemplos espec√≠ficos cuando sea necesario."""

                    template_section = f"\nTEMPLATE SAM:\n{template_content}" if template_content else ""
                    
                    analysis = llm.invoke(analysis_prompt.format(
                        handler_code=handler_content,
                        template_section=template_section
                    ))

                    st.markdown("### üìã An√°lisis Detallado")
                    st.info(analysis.content)

        with col2:
            if st.button("üîß Generar C√≥digo Mejorado"):
                with st.spinner("Generando versi√≥n mejorada..."):
                    improvement_prompt = """Bas√°ndote en el c√≥digo proporcionado, genera una versi√≥n mejorada que solucione los problemas identificados:

                    C√ìDIGO ORIGINAL:
                    {code}

                    Genera una versi√≥n mejorada que:
                    1. Solucione los problemas identificados
                    2. Implemente las mejores pr√°cticas
                    3. Optimice el rendimiento
                    4. Mejore la seguridad
                    
                    Proporciona el c√≥digo completo y mejorado, junto con comentarios explicativos.
                    El c√≥digo debe ser una √∫nica implementaci√≥n coherente, sin alternativas ni c√≥digo comentado."""

                    improved_code = llm.invoke(improvement_prompt.format(code=handler_content))
                    
                    st.markdown("### üìù C√≥digo Mejorado Sugerido")
                    st.code(improved_code.content, language="python")
                    
                    # Botones para descargar y copiar
                    st.download_button(
                        "‚¨áÔ∏è Descargar C√≥digo Mejorado",
                        improved_code.content,
                        file_name="handler_improved.py",
                        mime="text/plain"
                    )
                    
                    if st.button("üìã Copiar al Portapapeles"):
                        st.write(
                            f'<script>navigator.clipboard.writeText(`{improved_code.content}`)</script>', 
                            unsafe_allow_html=True
                        )
                        st.success("¬°C√≥digo copiado al portapapeles!")

if __name__ == "__main__":
    st.sidebar.markdown("""
    ### üìö Documentaci√≥n √ötil
    - [AWS Lambda](https://docs.aws.amazon.com/lambda/)
    - [SAM CLI](https://docs.aws.amazon.com/serverless-application-model/)
    - [API Gateway](https://docs.aws.amazon.com/apigateway/)
    """) 